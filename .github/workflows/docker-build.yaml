name: Docker build

on:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      context:
        required: false
        type: string
        default: .
      image-name:
        required: true
        type: string
      role-duration-seconds:
        required: false
        type: number
        default: 3600
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      role-to-assume:
        required: true

jobs:
  build:
    runs-on: self-hosted
    outputs:
      hash: steps.tags.outputs.hash
      ref: steps.tags.outputs.tag
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ secrets.role-to-assume }}
        role-duration-seconds: ${{ inputs.role-duration-seconds }}

    - name: Login to ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR Repo if not exist
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          if [[ -z $(aws ecr describe-repositories --query "repositories[?repositoryName=='$repo_name'].repositoryName" --output text) ]]; then
            aws ecr create-repository \
              --no-cli-pager \
              --repository-name \
              ${{ inputs.image-name }}
            aws ecr put-lifecycle-policy \
              --no-cli-pager \
              --repository-name \
              ${{ inputs.image-name }} \
              --lifecycle-policy-text '{"rules":[{"rulePriority":1,"description":"Expire images older then 14 days","selection":{"tagStatus":"untagged","countType":"sinceImagePushed","countUnit":"days","countNumber":14},"action":{"type":"expire"}}]}'
          fi

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ steps.ecr-login.outputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{raw}}

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        platforms: linux/amd64,linux/arm64
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ steps.meta.outputs.tags }}
        push: true
        provenance: false
